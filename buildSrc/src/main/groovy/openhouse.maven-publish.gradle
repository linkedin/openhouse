plugins {
  id 'maven-publish'
}

task sourcesJar(type: Jar) {
  archiveClassifier = "sources"
  from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
  archiveClassifier = "javadoc"
  from javadoc.destinationDir
}

tasks.withType(GenerateModuleMetadata) {
  enabled = false
}

[jar, sourcesJar, javadocJar].each { task ->
  task.from(rootDir) {
    include 'LICENSE'
    include 'NOTICE'
  }
}

def configurePom(pom) {
  pom.name = 'OpenHouse'
  pom.description = 'Control Plane for Tables in Open Data Lakehouse'
  pom.url = 'https://github.com/linkedin/openhouse'

  pom.licenses {
    license {
      name = 'BSD 2-Clause License'
      url = 'https://raw.githubusercontent.com/linkedin/openhouse/main/LICENSE'
    }
  }

  pom.scm {
    connection = 'scm:git:git://github.com/linkedin/openhouse.git'
    developerConnection = 'scm:git:ssh://github.com/linkedin/openhouse.git'
    url = 'https://github.com/linkedin/openhouse'
  }
}

publishing {
  publications {

    if (tasks.findByName('shadowJar')) {
      shadow(MavenPublication) { publication ->
        project.shadow.component(publication)
        artifact sourcesJar
        artifact javadocJar
        artifact jar

        configurePom(pom)
      }
    } else if(tasks.findByName('bootJar')) {
      mavenJava(MavenPublication) {
        from components.java

        artifact tasks.named("bootJar")
        artifact sourcesJar
        artifact javadocJar

        configurePom(pom)
      }
    } else {
      mavenJava(MavenPublication) {
        from components.java

        artifact sourcesJar
        artifact javadocJar

        configurePom(pom)
      }
    }
  }
  repositories {
    mavenLocal()
    maven {
      name = 'LinkedInJFrog'
      url = 'https://linkedin.jfrog.io/artifactory/openhouse'
      credentials {
        username System.getenv('JFROG_USERNAME')
        password System.getenv('JFROG_PASSWORD')
      }
    }
  }
}