def generatedCodeDir = "$buildDir/generated"
def generatedBinDir = "$buildDir/bin"
def commonDir = "${project(':client:common').projectDir}"
/**
 * Change the service name to produce respective client
 */
def serviceName = project.ext.get("codeGenForService")
def openApiCliVersion = "5.3.0"

task setUp(type: Exec) {
  commandLine "sh", "$commonDir/jar_download.sh",
      "-o", generatedBinDir,
      "-v", openApiCliVersion
  outputs.dir(generatedBinDir)
}

task clientCodeGen(type: Exec, dependsOn: ["$serviceName:openApiOutput", setUp]) {
  def inputSpec = tasks.getByPath("$serviceName:openApiOutput").outputs.files.first()
  commandLine "sh", "$commonDir/client_codegen.sh",
      "-i", tasks.getByPath("$serviceName:openApiOutput").outputs.files.first(), // path to spec
      "-o", generatedCodeDir,  // path to generated code
      "-j", generatedBinDir,  // path to download cli-jar
      "-n", project(serviceName).name,   // service name to generate packages
      "-v", openApiCliVersion
  // defining the following inputs and outputs ensures this task does not rerun, if input has not changed
  inputs.file(inputSpec)
  outputs.dir(generatedCodeDir)
}

project.compileJava {
  dependsOn "${project.path}:clientCodeGen"
  sourceSets.main.java { srcDir  "$generatedCodeDir/src/main/java" }
}
