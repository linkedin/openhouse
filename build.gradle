buildscript {
  repositories {
    maven {
      url "https://repo.maven.apache.org/maven2/"
      metadataSources {
        gradleMetadata()
        mavenPom()
        artifact()
      }
    }
    maven {
      url "https://plugins.gradle.org/m2/"
      metadataSources {
        gradleMetadata()
        mavenPom()
        artifact()
      }
    }
  }
  dependencies {
    classpath "com.diffplug.spotless:spotless-plugin-gradle:6.9.1"
    classpath "com.diffplug.spotless:spotless-lib:2.9.0"
    classpath "com.diffplug.spotless:spotless-lib-extra:2.9.0"
    classpath "com.github.spotbugs:com.github.spotbugs.gradle.plugin:4.8.0"
  }
}

ext {
  spring_web_version = "2.7.8"
  spark_version = "3.1.1"
  ok_http3_version = "4.11.0"
  junit_version = "5.11.0"
}

group = 'com.linkedin.openhouse'

subprojects {
  buildDir = "${rootProject.buildDir}/${project.name}"
  group = rootProject.group
  version = rootProject.version
}

allprojects {
  apply plugin: "com.diffplug.spotless"
  apply plugin: "com.github.spotbugs"

  group = 'com.linkedin.openhouse'

  repositories {
    maven {
      url "https://repo.maven.apache.org/maven2/"
      metadataSources {
        gradleMetadata()
        mavenPom()
        artifact()
      }
    }
  }

  configurations.all {
    resolutionStrategy {
      force 'com.fasterxml.jackson:jackson-bom:2.13.4'
      force 'com.fasterxml.jackson.core:jackson-databind:2.13.4'
      force 'org.apache.orc:orc-core:1.8.3'
      force 'com.google.guava:guava:31.1-jre'
    }
  }

  plugins.withType(JavaPlugin) {
    dependencies {

      testImplementation "org.assertj:assertj-core:3.24.2" //assertions library
      testImplementation "org.junit.jupiter:junit-jupiter-api:" + junit_version
      testImplementation "org.junit.jupiter:junit-jupiter-params:" + junit_version
      testImplementation "org.mockito:mockito-core:4.11.0"
      testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:" + junit_version
    }

    tasks.withType(Test) {
      useJUnitPlatform()
    }

    spotless {
      enforceCheck = false
      java {
        target '**/*.java'
        targetExclude 'client/**', 'build/**'

        importOrder('', 'static ')
        removeUnusedImports()
        trimTrailingWhitespace()

        endWithNewline()
        googleJavaFormat('1.7')
      }
    }

    spotbugs {
      includeFilter = rootProject.file('gradle/spotbugs/spotbugsInclude.xml')
      excludeFilter = rootProject.file('gradle/spotbugs/spotbugsExclude.xml')
      ignoreFailures = true
    }

    spotbugsMain {
      reports {
        html {
          required = true
          outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.html")
        }
      }
    }

    spotbugsTest.enabled = false
  }

  afterEvaluate {
    for (def task in it.tasks) {
      if (task != rootProject.tasks.CopyGitHooksTask) {
        task.dependsOn rootProject.tasks.CopyGitHooksTask
      }
    }
  }
}

// Local Git Hooks cannot be shared, as .git directory is gitignore'd.
tasks.register('CopyGitHooksTask', Copy) {
  println 'Make the git hook available in .git/hooks directory.'
  from file('scripts/git-hooks')
  into file('.git/hooks/')
}

